{"version":3,"file":"index.server.js","sourceRoot":"","sources":["../src/index.server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Carrier, getHubFromCarrier, getMainCarrier } from '@sentry/hub';\r\nimport { RewriteFrames } from '@sentry/integrations';\r\nimport { configureScope, getCurrentHub, init as nodeInit, Integrations } from '@sentry/node';\r\nimport { Event } from '@sentry/types';\r\nimport { escapeStringForRegex, logger } from '@sentry/utils';\r\nimport * as domainModule from 'domain';\r\nimport * as path from 'path';\r\n\r\nimport { instrumentServer } from './utils/instrumentServer';\r\nimport { MetadataBuilder } from './utils/metadataBuilder';\r\nimport { NextjsOptions } from './utils/nextjsOptions';\r\nimport { addIntegration } from './utils/userIntegrations';\r\n\r\nexport * from '@sentry/node';\r\n\r\n// Here we want to make sure to only include what doesn't have browser specifics\r\n// because or SSR of next.js we can only use this.\r\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\r\n\r\ntype GlobalWithDistDir = typeof global & { __rewriteFramesDistDir__: string };\r\nconst domain = domainModule as typeof domainModule & { active: (domainModule.Domain & Carrier) | null };\r\n\r\n/** Inits the Sentry NextJS SDK on node. */\r\nexport function init(options: NextjsOptions): void {\r\n  if (options.debug) {\r\n    logger.enable();\r\n  }\r\n\r\n  logger.log('Initializing SDK...');\r\n\r\n  if (sdkAlreadyInitialized()) {\r\n    logger.log('SDK already initialized');\r\n    return;\r\n  }\r\n\r\n  const metadataBuilder = new MetadataBuilder(options, ['nextjs', 'node']);\r\n  metadataBuilder.addSdkMetadata();\r\n  options.environment = options.environment || process.env.NODE_ENV;\r\n  addServerIntegrations(options);\r\n  // Right now we only capture frontend sessions for Next.js\r\n  options.autoSessionTracking = false;\r\n\r\n  // In an ideal world, this init function would be called before any requests are handled. That way, every domain we\r\n  // use to wrap a request would inherit its scope and client from the global hub. In practice, however, handling the\r\n  // first request is what causes us to initialize the SDK, as the init code is injected into `_app` and all API route\r\n  // handlers, and those are only accessed in the course of handling a request. As a result, we're already in a domain\r\n  // when `init` is called. In order to compensate for this and mimic the ideal world scenario, we stash the active\r\n  // domain, run `init` as normal, and then restore the domain afterwards, copying over data from the main hub as if we\r\n  // really were inheriting.\r\n  const activeDomain = domain.active;\r\n  domain.active = null;\r\n\r\n  nodeInit(options);\r\n\r\n  configureScope(scope => {\r\n    scope.setTag('runtime', 'node');\r\n    if (process.env.VERCEL) {\r\n      scope.setTag('vercel', true);\r\n    }\r\n\r\n    scope.addEventProcessor(filterTransactions);\r\n  });\r\n\r\n  if (activeDomain) {\r\n    const globalHub = getHubFromCarrier(getMainCarrier());\r\n    const domainHub = getHubFromCarrier(activeDomain);\r\n\r\n    // apply the changes made by `nodeInit` to the domain's hub also\r\n    domainHub.bindClient(globalHub.getClient());\r\n    domainHub.getScope()?.update(globalHub.getScope());\r\n    // `scope.update()` doesnâ€™t copy over event processors, so we have to add it manually\r\n    domainHub.getScope()?.addEventProcessor(filterTransactions);\r\n\r\n    // restore the domain hub as the current one\r\n    domain.active = activeDomain;\r\n  }\r\n\r\n  logger.log('SDK successfully initialized');\r\n}\r\n\r\nfunction sdkAlreadyInitialized(): boolean {\r\n  const hub = getCurrentHub();\r\n  return !!hub.getClient();\r\n}\r\n\r\nfunction addServerIntegrations(options: NextjsOptions): void {\r\n  // This value is injected at build time, based on the output directory specified in the build config\r\n  const distDirName = (global as GlobalWithDistDir).__rewriteFramesDistDir__ || '.next';\r\n  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so\r\n  // we can read in the project directory from the currently running process\r\n  const distDirAbsPath = path.resolve(process.cwd(), distDirName);\r\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(escapeStringForRegex(distDirAbsPath));\r\n\r\n  const defaultRewriteFramesIntegration = new RewriteFrames({\r\n    iteratee: frame => {\r\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\r\n      return frame;\r\n    },\r\n  });\r\n\r\n  if (options.integrations) {\r\n    options.integrations = addIntegration(defaultRewriteFramesIntegration, options.integrations);\r\n  } else {\r\n    options.integrations = [defaultRewriteFramesIntegration];\r\n  }\r\n\r\n  if (options.tracesSampleRate !== undefined || options.tracesSampler !== undefined) {\r\n    const defaultHttpTracingIntegration = new Integrations.Http({ tracing: true });\r\n    options.integrations = addIntegration(defaultHttpTracingIntegration, options.integrations, {\r\n      Http: { keyPath: '_tracing', value: true },\r\n    });\r\n  }\r\n}\r\n\r\nfunction filterTransactions(event: Event): Event | null {\r\n  return event.type === 'transaction' && event.transaction === '/404' ? null : event;\r\n}\r\n\r\nexport { withSentryConfig } from './config';\r\nexport { withSentry } from './utils/withSentry';\r\n\r\n// wrap various server methods to enable error monitoring and tracing\r\ninstrumentServer();\r\n"]}