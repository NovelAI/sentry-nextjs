{"version":3,"file":"index.client.js","sourceRoot":"","sources":["../src/index.client.ts"],"names":[],"mappings":";;AAAA,uCAAuG;AACvG,2CAA4G;AAE5G,+CAAiE;AACjE,2DAA0D;AAE1D,6DAA4E;AAE5E,wDAA8B;AAC9B,+CAAiE;AAAxD,6CAAA,yBAAyB,CAAA;AAE1B,IAAA,sDAAc,CAAyB;AAClC,QAAA,YAAY,yCAAQ,oBAAmB,KAAE,cAAc,gBAAA,IAAG;AAEvE,qEAAqE;AACrE,SAAgB,IAAI,CAAC,OAAsB;IACzC,IAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAC1E,eAAe,CAAC,cAAc,EAAE,CAAC;IACjC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;IAElE,wEAAwE;IACxE,IAAM,YAAY,GAChB,OAAO,CAAC,gBAAgB,KAAK,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS;QAC3E,CAAC,CAAC,OAAO,CAAC,YAAY;QACtB,CAAC,CAAC,wBAAwB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAErD,YAAS,uCACJ,OAAO,KACV,YAAY,cAAA,IACZ,CAAC;IACH,sBAAc,CAAC,UAAA,KAAK;QAClB,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnC,KAAK,CAAC,iBAAiB,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,KAAK,CAAC,IAAI,KAAK,aAAa,IAAI,KAAK,CAAC,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,EAA7E,CAA6E,CAAC,CAAC;IAClH,CAAC,CAAC,CAAC;AACL,CAAC;AAnBD,oBAmBC;AAED,IAAM,gCAAgC,GAAG,IAAI,cAAc,CAAC;IAC1D,cAAc,mBAAM,8CAAoC,CAAC,cAAc,GAAE,UAAU,EAAC;IACpF,sBAAsB,EAAE,kCAAyB;CAClD,CAAC,CAAC;AAEH,SAAS,wBAAwB,CAAC,YAA+B;IAC/D,IAAI,YAAY,EAAE;QAChB,OAAO,iCAAc,CAAC,gCAAgC,EAAE,YAAY,EAAE;YACpE,cAAc,EAAE,EAAE,OAAO,EAAE,gCAAgC,EAAE,KAAK,EAAE,kCAAyB,EAAE;SAChG,CAAC,CAAC;KACJ;SAAM;QACL,OAAO,CAAC,gCAAgC,CAAC,CAAC;KAC3C;AACH,CAAC","sourcesContent":["import { configureScope, init as reactInit, Integrations as BrowserIntegrations } from '@sentry/react';\r\nimport { defaultRequestInstrumentationOptions, Integrations as TracingIntegrations } from '@sentry/tracing';\r\n\r\nimport { nextRouterInstrumentation } from './performance/client';\r\nimport { MetadataBuilder } from './utils/metadataBuilder';\r\nimport { NextjsOptions } from './utils/nextjsOptions';\r\nimport { addIntegration, UserIntegrations } from './utils/userIntegrations';\r\n\r\nexport * from '@sentry/react';\r\nexport { nextRouterInstrumentation } from './performance/client';\r\n\r\nconst { BrowserTracing } = TracingIntegrations;\r\nexport const Integrations = { ...BrowserIntegrations, BrowserTracing };\r\n\r\n/** Inits the Sentry NextJS SDK on the browser with the React SDK. */\r\nexport function init(options: NextjsOptions): void {\r\n  const metadataBuilder = new MetadataBuilder(options, ['nextjs', 'react']);\r\n  metadataBuilder.addSdkMetadata();\r\n  options.environment = options.environment || process.env.NODE_ENV;\r\n\r\n  // Only add BrowserTracing if a tracesSampleRate or tracesSampler is set\r\n  const integrations =\r\n    options.tracesSampleRate === undefined && options.tracesSampler === undefined\r\n      ? options.integrations\r\n      : createClientIntegrations(options.integrations);\r\n\r\n  reactInit({\r\n    ...options,\r\n    integrations,\r\n  });\r\n  configureScope(scope => {\r\n    scope.setTag('runtime', 'browser');\r\n    scope.addEventProcessor(event => (event.type === 'transaction' && event.transaction === '/404' ? null : event));\r\n  });\r\n}\r\n\r\nconst defaultBrowserTracingIntegration = new BrowserTracing({\r\n  tracingOrigins: [...defaultRequestInstrumentationOptions.tracingOrigins, /^(api\\/)/],\r\n  routingInstrumentation: nextRouterInstrumentation,\r\n});\r\n\r\nfunction createClientIntegrations(integrations?: UserIntegrations): UserIntegrations {\r\n  if (integrations) {\r\n    return addIntegration(defaultBrowserTracingIntegration, integrations, {\r\n      BrowserTracing: { keyPath: 'options.routingInstrumentation', value: nextRouterInstrumentation },\r\n    });\r\n  } else {\r\n    return [defaultBrowserTracingIntegration];\r\n  }\r\n}\r\n"]}