{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/config/types.ts"],"names":[],"mappings":"","sourcesContent":["import { SentryCliPluginOptions } from '@sentry/webpack-plugin';\r\nimport { WebpackPluginInstance } from 'webpack';\r\n\r\nexport type SentryWebpackPluginOptions = SentryCliPluginOptions;\r\nexport type SentryWebpackPlugin = WebpackPluginInstance & { options: SentryWebpackPluginOptions };\r\n\r\n/**\r\n * Overall Nextjs config\r\n */\r\n\r\nexport type ExportedNextConfig = Partial<NextConfigObject> | NextConfigFunction;\r\n\r\nexport type NextConfigObject = {\r\n  // custom webpack options\r\n  webpack: WebpackConfigFunction;\r\n  // whether to build serverless functions for all pages, not just API routes\r\n  target: 'server' | 'experimental-serverless-trace';\r\n  // the output directory for the built app (defaults to \".next\")\r\n  distDir: string;\r\n  sentry?: {\r\n    disableServerWebpackPlugin?: boolean;\r\n    disableClientWebpackPlugin?: boolean;\r\n  };\r\n} & {\r\n  // other `next.config.js` options\r\n  [key: string]: unknown;\r\n};\r\n\r\nexport type NextConfigFunction = (\r\n  phase: string,\r\n  defaults: { defaultConfig: NextConfigObject },\r\n) => Partial<NextConfigObject>;\r\n\r\n/**\r\n * Webpack config\r\n */\r\n\r\n// the format for providing custom webpack config in your nextjs options\r\nexport type WebpackConfigFunction = (config: WebpackConfigObject, options: BuildContext) => WebpackConfigObject;\r\n\r\nexport type WebpackConfigObject = {\r\n  devtool?: string;\r\n  plugins?: Array<WebpackPluginInstance | SentryWebpackPlugin>;\r\n  entry: WebpackEntryProperty;\r\n  output: { filename: string; path: string };\r\n  target: string;\r\n  context: string;\r\n  resolve?: {\r\n    alias?: { [key: string]: string | boolean };\r\n  };\r\n} & {\r\n  // other webpack options\r\n  [key: string]: unknown;\r\n};\r\n\r\n// Information about the current build environment\r\nexport type BuildContext = {\r\n  dev: boolean;\r\n  isServer: boolean;\r\n  buildId: string;\r\n  dir: string;\r\n  config: NextConfigObject;\r\n  webpack: { version: string };\r\n};\r\n\r\n/**\r\n * Webpack `entry` config\r\n */\r\n\r\n// For our purposes, the value for `entry` is either an object, or an async function which returns such an object\r\nexport type WebpackEntryProperty = EntryPropertyObject | EntryPropertyFunction;\r\n\r\nexport type EntryPropertyObject = {\r\n  [key: string]: EntryPointValue;\r\n};\r\n\r\nexport type EntryPropertyFunction = () => Promise<EntryPropertyObject>;\r\n\r\n// Each value in that object is either a string representing a single entry point, an array of such strings, or an\r\n// object containing either of those, along with other configuration options. In that third case, the entry point(s) are\r\n// listed under the key `import`.\r\nexport type EntryPointValue = string | Array<string> | EntryPointObject;\r\nexport type EntryPointObject = { import: string | Array<string> };\r\n"]}